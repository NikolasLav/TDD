from vkbottle import API, CtxStorage, GroupEventType, GroupTypes
from vkbottle.bot import Blueprint, Message, MessageEvent, rules, MessageEventMin
from lib import keyboards
from manage import Reg, user_info, prepare
from config import bot_config as config
from random import randrange as rand
import asyncpg
import db

####################
# Messages manager #
####################

part = Blueprint("For questions and answers")
part.on.vbml_ignore_case = True
api = API(config['group_token'])
ctx = CtxStorage()
DSN = f'postgresql://postgres:{config["pgpwd"]}@127.0.0.1/test'

"""Bot starting' handle"""
@part.on.private_message(lev="–Ω–∞—á–∞—Ç—å")
async def age_from(message: Message):
    try:
        int(ctx.get("age_from"))
        int(ctx.get("age_to"))
        await keyboards.start_handler(message)
        return """–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º VK? üòë
        –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–∏—Å–∫ —É–∂–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è.
        –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."""
    except:
        await part.state_dispenser.set(message.peer_id, Reg.AGE_FROM)
        return """–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç "–û–¢":"""


@part.on.private_message(state=Reg.AGE_FROM)
async def age_to(message: Message):
	try:
		int(message.text)
		ctx.set('age_from', message.text)
		await part.state_dispenser.set(message.peer_id, Reg.AGE_TO)
		return """–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç "–î–û":"""
	except:
		await part.state_dispenser.set(message.peer_id, Reg.AGE_FROM)
		return """–û—à–∏–±–∫–∞, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
		–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç "–û–¢":"""


@part.on.private_message(state=Reg.AGE_TO)
async def send_keyboard(message: Message):
	try:
		int(message.text)
		ctx.set('age_to', message.text)
		if int(ctx.get("age_from")) > int(ctx.get("age_to")):
			await part.state_dispenser.set(message.peer_id, Reg.AGE_FROM)
			return """–û—à–∏–±–∫–∞, –∏—Å–∫–æ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç "–û–¢" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º –≤–æ–∑—Ä–∞—Å—Ç–æ "–î–û". –î–∞–≤–∞—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏–º –≤–≤–æ–¥.
			–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç "–û–¢":"""
		else:
			await part.state_dispenser.set(message.peer_id, Reg.END)
			await user_info(message.peer_id)
			return await keyboards.keyboard_handler(message)
	except:
		await part.state_dispenser.set(message.peer_id, Reg.AGE_TO)
		return """–û—à–∏–±–∫–∞, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
		–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç "–î–û":"""


"""raw_event' keyboars handlers"""
@part.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "search"}),
)
async def show_result(event: MessageEvent):
    user_id = event.peer_id
    conn = await asyncpg.connect('postgresql://postgres:postgres@127.0.0.1/test')
    await event.show_snackbar("–ü—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –í–∞–º –ø–∞—Ä—É...")
    person = await db.get_results(conn, user_id=user_id, not_seen=True)
    if (person is not None) and (len(person) > 0):
        person = person[0]
        id = person[1]
        ctx.set('last_search', id) #–¥–ª—è –ª–∞–π–∫–æ–≤
        photos = person[3].split(',')
        attachment = f'photo{id}_'+f',photo{id}_'.join(photos)
        url = "http://vk.com/id"+str(id)
        await message_send(user_id, 
        f"""{person[2]} {url}
        """, attachment)
            
        await db.update_results(
            conn, profile_id=person[1], user_id=user_id, seen=True)
        # –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤—É—é, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—ã–¥–∞—á—É
        await prepare(conn, user_id)
    else:
        await message_send(
            user_id, "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—É—Å—Ç, –ª–∏–±–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —É –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
    await conn.close()


@part.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "change_settings"}),
)
async def show_snackbar(event: MessageEvent):
	await event.show_snackbar("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
    

@part.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "view_settings"}),
)
async def show_snackbar(event: MessageEvent):
	if ctx.get("user_name") != None:
		await event.show_snackbar(f'{ctx.get("user_name")}, –¥/—Ä {ctx.get("bdate")}. –ì–æ—Ä–æ–¥: {ctx.get("city_title")}. –í–æ–∑—Ä–∞—Å—Ç –æ—Ç {ctx.get("age_from")} –¥–æ {ctx.get("age_to")}')
	else:
		await event.show_snackbar("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


async def message_send(peer_id, msg, attachment=None):
    await api.messages.send(peer_id=peer_id, message=msg, random_id=rand(0,10000), attachment=attachment)
